import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';
import IndividualHabitAnalytics from './IndividualHabitAnalytics';

// Mock file download functionality
const mockCreateObjectURL = jest.fn();
const mockRevokeObjectURL = jest.fn();
const mockClick = jest.fn();
const mockAppendChild = jest.fn();
const mockRemoveChild = jest.fn();

// Mock window and document methods
Object.defineProperty(window, 'URL', {
  value: {
    createObjectURL: mockCreateObjectURL,
    revokeObjectURL: mockRevokeObjectURL,
  },
});

Object.defineProperty(document, 'createElement', {
  value: jest.fn().mockImplementation((tagName) => {
    if (tagName === 'a') {
      return {
        href: '',
        download: '',
        click: mockClick,
        style: {},
      };
    }
    return {};
  }),
});

Object.defineProperty(document.body, 'appendChild', {
  value: mockAppendChild,
});

Object.defineProperty(document.body, 'removeChild', {
  value: mockRemoveChild,
});

describe('IndividualHabitAnalytics', () => {
  const mockOnClose = jest.fn();

  const sampleHabit = {
    id: 1,
    name: 'Morning Exercise',
    completedDates: [
      '2024-01-01T10:00:00Z',
      '2024-01-02T10:00:00Z',
      '2024-01-03T10:00:00Z',
      '2024-01-05T10:00:00Z',
      '2024-01-06T10:00:00Z',
    ],
    expectedFrequency: { count: 1, period: 'day' },
    tags: ['Fitness', 'Health'],
    createdAt: '2023-12-01T00:00:00Z'
  };

  const habitWithStringFrequency = {
    id: 2,
    name: 'Read Books',
    completedDates: [
      '2024-01-01T20:00:00Z',
      '2024-01-03T20:00:00Z',
      '2024-01-04T20:00:00Z',
    ],
    expectedFrequency: 'daily',
    tags: ['Learning']
  };

  const habitWithWeeklyFrequency = {
    id: 3,
    name: 'Gym Workout',
    completedDates: [
      '2024-01-01T18:00:00Z',
      '2024-01-08T18:00:00Z',
      '2024-01-15T18:00:00Z',
    ],
    expectedFrequency: { count: 2, period: 'week' },
    tags: ['Fitness']
  };

  const emptyHabit = {
    id: 4,
    name: 'New Habit',
    completedDates: [],
    expectedFrequency: { count: 1, period: 'day' },
    tags: []
  };

  beforeEach(() => {
    jest.clearAllMocks();
    mockCreateObjectURL.mockReturnValue('mock-url');
  });

  describe('Rendering', () => {
    test('renders analytics modal with habit data', () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      expect(screen.getByText('📊 Morning Exercise Analytics')).toBeInTheDocument();
      expect(screen.getByRole('dialog')).toBeInTheDocument();
    });

    test('renders nothing when habit is null', () => {
      const { container } = render(<IndividualHabitAnalytics habit={null} onClose={mockOnClose} />);
      expect(container.firstChild).toBeNull();
    });

    test('renders nothing when habit is undefined', () => {
      const { container } = render(<IndividualHabitAnalytics habit={undefined} onClose={mockOnClose} />);
      expect(container.firstChild).toBeNull();
    });
  });

  describe('Header and Close Functionality', () => {
    test('displays habit name in header', () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      expect(screen.getByText('📊 Morning Exercise Analytics')).toBeInTheDocument();
    });

    test('calls onClose when close button is clicked', () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      const closeButton = screen.getByRole('button', { name: 'Close analytics modal' });
      fireEvent.click(closeButton);
      
      expect(mockOnClose).toHaveBeenCalledTimes(1);
    });

    test('calls onClose when clicking outside modal', () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      const overlay = screen.getByRole('dialog');
      fireEvent.click(overlay);
      
      expect(mockOnClose).toHaveBeenCalledTimes(1);
    });

    test('does not close when clicking inside modal content', () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      const modalContent = screen.getByText('📊 Morning Exercise Analytics').parentElement;
      fireEvent.click(modalContent);
      
      expect(mockOnClose).not.toHaveBeenCalled();
    });
  });

  describe('Expected Frequency Display', () => {
    test('displays object frequency correctly', () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      expect(screen.getByText('1 time per day')).toBeInTheDocument();
    });

    test('displays weekly frequency correctly', () => {
      render(<IndividualHabitAnalytics habit={habitWithWeeklyFrequency} onClose={mockOnClose} />);
      
      expect(screen.getByText('2 times per week')).toBeInTheDocument();
    });

    test('displays string frequency correctly', () => {
      render(<IndividualHabitAnalytics habit={habitWithStringFrequency} onClose={mockOnClose} />);
      
      expect(screen.getByText('daily')).toBeInTheDocument();
    });

    test('displays "Not set" when frequency is missing', () => {
      const habitWithoutFrequency = { ...sampleHabit, expectedFrequency: null };
      render(<IndividualHabitAnalytics habit={habitWithoutFrequency} onClose={mockOnClose} />);
      
      expect(screen.getByText('Not set')).toBeInTheDocument();
    });

    test('handles JSON string frequency', () => {
      const habitWithJSONFrequency = { 
        ...sampleHabit, 
        expectedFrequency: '{"count": 3, "period": "week"}' 
      };
      render(<IndividualHabitAnalytics habit={habitWithJSONFrequency} onClose={mockOnClose} />);
      
      expect(screen.getByText('3 times per week')).toBeInTheDocument();
    });
  });

  describe('Statistics Calculation', () => {
    test('displays correct total completions', () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      expect(screen.getByText('5')).toBeInTheDocument();
      expect(screen.getByText('Total Completions')).toBeInTheDocument();
    });

    test('displays zero completions for empty habit', () => {
      render(<IndividualHabitAnalytics habit={emptyHabit} onClose={mockOnClose} />);
      
      expect(screen.getByText('0')).toBeInTheDocument();
      expect(screen.getByText('Total Completions')).toBeInTheDocument();
    });

    test('calculates and displays current streak', () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      expect(screen.getByText('Current Streak')).toBeInTheDocument();
      // The actual streak value depends on the current date, so we just check it exists
      const streakElements = screen.getAllByText(/^\d+$/);
      expect(streakElements.length).toBeGreaterThan(0);
    });

    test('calculates and displays longest streak', () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      expect(screen.getByText('Best Streak')).toBeInTheDocument();
      // The actual streak value depends on calculation, so we just check it exists
      const streakElements = screen.getAllByText(/^\d+$/);
      expect(streakElements.length).toBeGreaterThan(0);
    });
  });

  describe('Streak Achievements', () => {
    test('displays achievements section when milestones are achieved', () => {
      // Create a habit with enough completions to achieve milestones
      const achievementHabit = {
        ...sampleHabit,
        completedDates: Array.from({ length: 10 }, (_, i) => 
          new Date(2024, 0, i + 1).toISOString()
        )
      };
      
      render(<IndividualHabitAnalytics habit={achievementHabit} onClose={mockOnClose} />);
      
      expect(screen.getByText('🏆 Streak Achievements')).toBeInTheDocument();
    });

    test('shows next milestone when available', () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      // Should show next milestone information
      expect(screen.getByText(/Next goal:/)).toBeInTheDocument();
    });

    test('does not show achievements section when no milestones achieved', () => {
      render(<IndividualHabitAnalytics habit={emptyHabit} onClose={mockOnClose} />);
      
      expect(screen.queryByText('🏆 Streak Achievements')).not.toBeInTheDocument();
    });
  });

  describe('Weekly Progress', () => {
    test('displays this week progress section', () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      expect(screen.getByText('This Week Progress')).toBeInTheDocument();
    });

    test('shows weekly progress with completion ratio', () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      // Should show some format of completions/expected
      expect(screen.getByText(/\d+\s*\/\s*\d+/)).toBeInTheDocument();
    });

    test('displays percentage progress', () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      // Should show percentage
      expect(screen.getByText(/%$/)).toBeInTheDocument();
    });
  });

  describe('Monthly Calendar', () => {
    test('displays monthly calendar section', () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      expect(screen.getByText('This Month Calendar')).toBeInTheDocument();
    });

    test('shows current month name', () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      const currentMonth = new Date().toLocaleDateString('en-US', { month: 'long' });
      const currentYear = new Date().getFullYear();
      
      expect(screen.getByText(`${currentMonth} ${currentYear}`)).toBeInTheDocument();
    });

    test('displays day headers', () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      const dayHeaders = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
      dayHeaders.forEach(day => {
        expect(screen.getByText(day)).toBeInTheDocument();
      });
    });

    test('shows calendar legend', () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      expect(screen.getByText('Less')).toBeInTheDocument();
      expect(screen.getByText('More')).toBeInTheDocument();
    });
  });

  describe('Data Export', () => {
    test('displays export section', () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      expect(screen.getByText('Export Data')).toBeInTheDocument();
      expect(screen.getByText('Download your habit data for analysis')).toBeInTheDocument();
    });

    test('has CSV export button', () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      const csvButton = screen.getByText('📊 CSV');
      expect(csvButton).toBeInTheDocument();
    });

    test('has JSON export button', () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      const jsonButton = screen.getByText('📄 JSON');
      expect(jsonButton).toBeInTheDocument();
    });

    test('triggers CSV download when CSV button is clicked', async () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      const csvButton = screen.getByText('📊 CSV');
      fireEvent.click(csvButton);
      
      await waitFor(() => {
        expect(mockCreateObjectURL).toHaveBeenCalled();
        expect(mockClick).toHaveBeenCalled();
        expect(mockAppendChild).toHaveBeenCalled();
        expect(mockRemoveChild).toHaveBeenCalled();
        expect(mockRevokeObjectURL).toHaveBeenCalled();
      });
    });

    test('triggers JSON download when JSON button is clicked', async () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      const jsonButton = screen.getByText('📄 JSON');
      fireEvent.click(jsonButton);
      
      await waitFor(() => {
        expect(mockCreateObjectURL).toHaveBeenCalled();
        expect(mockClick).toHaveBeenCalled();
        expect(mockAppendChild).toHaveBeenCalled();
        expect(mockRemoveChild).toHaveBeenCalled();
        expect(mockRevokeObjectURL).toHaveBeenCalled();
      });
    });
  });

  describe('Recent Activity', () => {
    test('displays recent activity section', () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      expect(screen.getByText('Recent Activity')).toBeInTheDocument();
    });

    test('shows last completed date when habit has completions', () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      expect(screen.getByText(/Last completed:/)).toBeInTheDocument();
    });

    test('shows recent dates', () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      expect(screen.getByText(/Recent dates:/)).toBeInTheDocument();
    });

    test('shows no completions message for empty habit', () => {
      render(<IndividualHabitAnalytics habit={emptyHabit} onClose={mockOnClose} />);
      
      expect(screen.getByText('No completions yet. Start tracking today!')).toBeInTheDocument();
    });
  });

  describe('Export Utility Functions', () => {
    test('export functions are available in the component', () => {
      // Since the functions are defined within the component file,
      // we test them through the component behavior
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      const csvButton = screen.getByText('📊 CSV');
      const jsonButton = screen.getByText('📄 JSON');
      
      expect(csvButton).toBeInTheDocument();
      expect(jsonButton).toBeInTheDocument();
    });
  });

  describe('Accessibility', () => {
    test('has proper ARIA attributes', () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      expect(screen.getByRole('dialog')).toHaveAttribute('aria-modal', 'true');
      expect(screen.getByRole('dialog')).toHaveAttribute('aria-labelledby', 'analytics-title');
    });

    test('close button has proper aria-label', () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      expect(screen.getByRole('button', { name: 'Close analytics modal' })).toBeInTheDocument();
    });

    test('sections have proper headings', () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      expect(screen.getByText('Expected Frequency')).toBeInTheDocument();
      expect(screen.getByText('This Week Progress')).toBeInTheDocument();
      expect(screen.getByText('This Month Calendar')).toBeInTheDocument();
      expect(screen.getByText('Export Data')).toBeInTheDocument();
      expect(screen.getByText('Recent Activity')).toBeInTheDocument();
    });

    test('has screen reader content for statistics', () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      // Check for screen reader friendly content
      expect(screen.getByText('Total Completions')).toBeInTheDocument();
      expect(screen.getByText('Current Streak')).toBeInTheDocument();
      expect(screen.getByText('Best Streak')).toBeInTheDocument();
    });
  });

  describe('Edge Cases', () => {
    test('handles habit with null completedDates', () => {
      const habitWithNullDates = { ...sampleHabit, completedDates: null };
      render(<IndividualHabitAnalytics habit={habitWithNullDates} onClose={mockOnClose} />);
      
      expect(screen.getByText('0')).toBeInTheDocument();
      expect(screen.getByText('No completions yet. Start tracking today!')).toBeInTheDocument();
    });

    test('handles habit with undefined completedDates', () => {
      const habitWithUndefinedDates = { ...sampleHabit };
      delete habitWithUndefinedDates.completedDates;
      
      render(<IndividualHabitAnalytics habit={habitWithUndefinedDates} onClose={mockOnClose} />);
      
      expect(screen.getByText('0')).toBeInTheDocument();
      expect(screen.getByText('No completions yet. Start tracking today!')).toBeInTheDocument();
    });

    test('handles habit with empty tags array', () => {
      const habitWithEmptyTags = { ...sampleHabit, tags: [] };
      render(<IndividualHabitAnalytics habit={habitWithEmptyTags} onClose={mockOnClose} />);
      
      expect(screen.getByText('📊 Morning Exercise Analytics')).toBeInTheDocument();
    });

    test('handles habit with no createdAt date', () => {
      const habitWithoutCreatedAt = { ...sampleHabit };
      delete habitWithoutCreatedAt.createdAt;
      
      render(<IndividualHabitAnalytics habit={habitWithoutCreatedAt} onClose={mockOnClose} />);
      
      expect(screen.getByText('📊 Morning Exercise Analytics')).toBeInTheDocument();
    });

    test('handles very long habit names', () => {
      const habitWithLongName = { 
        ...sampleHabit, 
        name: 'This is a very long habit name that should still display properly in the analytics modal' 
      };
      
      render(<IndividualHabitAnalytics habit={habitWithLongName} onClose={mockOnClose} />);
      
      expect(screen.getByText(/This is a very long habit name/)).toBeInTheDocument();
    });

    test('handles invalid date strings in completedDates', () => {
      const habitWithInvalidDates = {
        ...sampleHabit,
        completedDates: [
          'invalid-date',
          '',
          null,
          undefined,
          '2024-13-45T25:70:80Z',
          'not-a-date-at-all',
          '2024-01-01T10:00:00Z' // One valid date
        ]
      };
      
      expect(() => {
        render(<IndividualHabitAnalytics habit={habitWithInvalidDates} onClose={mockOnClose} />);
      }).not.toThrow();
      
      expect(screen.getByText('📊 Morning Exercise Analytics')).toBeInTheDocument();
    });

    test('handles extremely large number of completions', () => {
      const habitWithManyCompletions = {
        ...sampleHabit,
        completedDates: Array.from({ length: 10000 }, (_, i) => 
          new Date(2020, 0, 1 + Math.floor(i / 10)).toISOString()
        )
      };
      
      const startTime = performance.now();
      render(<IndividualHabitAnalytics habit={habitWithManyCompletions} onClose={mockOnClose} />);
      const endTime = performance.now();
      
      // Should render within reasonable time
      expect(endTime - startTime).toBeLessThan(2000);
      expect(screen.getByText('📊 Morning Exercise Analytics')).toBeInTheDocument();
    });

    test('handles habit with special characters and emojis in name', () => {
      const habitWithSpecialName = {
        ...sampleHabit,
        name: '🏃‍♂️ Run & Walk! @Home #Daily $$ 100% <script>alert("test")</script>'
      };
      
      render(<IndividualHabitAnalytics habit={habitWithSpecialName} onClose={mockOnClose} />);
      
      expect(screen.getByText(/🏃‍♂️ Run & Walk!/)).toBeInTheDocument();
    });

    test('handles circular references in habit object', () => {
      const circularHabit = { ...sampleHabit };
      circularHabit.self = circularHabit; // Create circular reference
      
      expect(() => {
        render(<IndividualHabitAnalytics habit={circularHabit} onClose={mockOnClose} />);
      }).not.toThrow();
    });

    test('handles malformed expectedFrequency values', () => {
      const habitsWithMalformedFreq = [
        { ...sampleHabit, expectedFrequency: { count: 'invalid', period: 'day' } },
        { ...sampleHabit, expectedFrequency: { count: -5, period: 'invalid' } },
        { ...sampleHabit, expectedFrequency: 'completely-invalid' },
        { ...sampleHabit, expectedFrequency: 12345 },
        { ...sampleHabit, expectedFrequency: [] }
      ];
      
      habitsWithMalformedFreq.forEach((habit, index) => {
        expect(() => {
          render(<IndividualHabitAnalytics habit={habit} onClose={mockOnClose} />);
        }).not.toThrow();
      });
    });
  });

  describe('Performance Tests', () => {
    test('handles rendering with large completion datasets efficiently', () => {
      const largeHabit = {
        ...sampleHabit,
        completedDates: Array.from({ length: 5000 }, (_, i) => {
          const date = new Date(2020, 0, 1);
          date.setDate(date.getDate() + Math.floor(i / 5));
          return date.toISOString();
        })
      };

      const startTime = performance.now();
      render(<IndividualHabitAnalytics habit={largeHabit} onClose={mockOnClose} />);
      const endTime = performance.now();
      
      expect(endTime - startTime).toBeLessThan(1500); // Should render in under 1.5 seconds
      expect(screen.getByText('📊 Morning Exercise Analytics')).toBeInTheDocument();
    });

    test('export functions handle large datasets efficiently', async () => {
      const largeHabit = {
        ...sampleHabit,
        completedDates: Array.from({ length: 1000 }, (_, i) => 
          new Date(2024, 0, 1 + i).toISOString()
        )
      };

      render(<IndividualHabitAnalytics habit={largeHabit} onClose={mockOnClose} />);
      
      const csvButton = screen.getByText('📊 CSV');
      const jsonButton = screen.getByText('📄 JSON');
      
      const startTime = performance.now();
      fireEvent.click(csvButton);
      await waitFor(() => expect(mockCreateObjectURL).toHaveBeenCalled());
      
      fireEvent.click(jsonButton);
      await waitFor(() => expect(mockCreateObjectURL).toHaveBeenCalledTimes(2));
      const endTime = performance.now();
      
      expect(endTime - startTime).toBeLessThan(1000); // Exports should be fast
    });

    test('calendar rendering with many completions is efficient', () => {
      const habitWithManyCurrentMonthCompletions = {
        ...sampleHabit,
        completedDates: Array.from({ length: 100 }, (_, i) => {
          const now = new Date();
          const date = new Date(now.getFullYear(), now.getMonth(), (i % 28) + 1, i % 24);
          return date.toISOString();
        })
      };

      const startTime = performance.now();
      render(<IndividualHabitAnalytics habit={habitWithManyCurrentMonthCompletions} onClose={mockOnClose} />);
      const endTime = performance.now();
      
      expect(endTime - startTime).toBeLessThan(500);
      expect(screen.getByText('This Month Calendar')).toBeInTheDocument();
    });
  });

  describe('Advanced Export Testing', () => {
    test('CSV export contains correct headers and structure', async () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      const csvButton = screen.getByText('📊 CSV');
      fireEvent.click(csvButton);
      
      await waitFor(() => {
        expect(mockCreateObjectURL).toHaveBeenCalled();
        // Verify the CSV content structure by checking the Blob was created
        const call = mockCreateObjectURL.mock.calls[0];
        expect(call[0]).toBeInstanceOf(Blob);
        expect(call[0].type).toBe('text/csv');
      });
    });

    test('JSON export contains correct structure and data', async () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      const jsonButton = screen.getByText('📄 JSON');
      fireEvent.click(jsonButton);
      
      await waitFor(() => {
        expect(mockCreateObjectURL).toHaveBeenCalled();
        const call = mockCreateObjectURL.mock.calls[0];
        expect(call[0]).toBeInstanceOf(Blob);
        expect(call[0].type).toBe('application/json');
      });
    });

    test('export handles empty habit data gracefully', async () => {
      render(<IndividualHabitAnalytics habit={emptyHabit} onClose={mockOnClose} />);
      
      const csvButton = screen.getByText('📊 CSV');
      const jsonButton = screen.getByText('📄 JSON');
      
      fireEvent.click(csvButton);
      await waitFor(() => expect(mockCreateObjectURL).toHaveBeenCalled());
      
      fireEvent.click(jsonButton);
      await waitFor(() => expect(mockCreateObjectURL).toHaveBeenCalledTimes(2));
      
      // Should not throw errors
      expect(mockClick).toHaveBeenCalledTimes(2);
    });

    test('export cleanup is properly handled', async () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      const csvButton = screen.getByText('📊 CSV');
      fireEvent.click(csvButton);
      
      await waitFor(() => {
        expect(mockCreateObjectURL).toHaveBeenCalled();
        expect(mockAppendChild).toHaveBeenCalled();
        expect(mockClick).toHaveBeenCalled();
        expect(mockRemoveChild).toHaveBeenCalled();
        expect(mockRevokeObjectURL).toHaveBeenCalled();
      });
    });
  });

  describe('Calendar Edge Cases', () => {
    test('handles leap year dates correctly', () => {
      const leapYearHabit = {
        ...sampleHabit,
        completedDates: [
          '2024-02-29T10:00:00Z', // Leap year date
          '2024-02-28T10:00:00Z',
          '2024-03-01T10:00:00Z'
        ]
      };
      
      render(<IndividualHabitAnalytics habit={leapYearHabit} onClose={mockOnClose} />);
      expect(screen.getByText('This Month Calendar')).toBeInTheDocument();
    });

    test('handles different timezones in completion dates', () => {
      const timezoneHabit = {
        ...sampleHabit,
        completedDates: [
          '2024-01-01T00:00:00-08:00', // PST
          '2024-01-01T12:00:00+05:30', // IST
          '2024-01-01T18:00:00Z',      // UTC
          '2024-01-01T23:59:59+02:00'  // CET
        ]
      };
      
      render(<IndividualHabitAnalytics habit={timezoneHabit} onClose={mockOnClose} />);
      expect(screen.getByText('This Month Calendar')).toBeInTheDocument();
    });

    test('displays correct month boundaries', () => {
      const now = new Date();
      const monthBoundaryHabit = {
        ...sampleHabit,
        completedDates: [
          new Date(now.getFullYear(), now.getMonth(), 1).toISOString(), // First day
          new Date(now.getFullYear(), now.getMonth() + 1, 0).toISOString(), // Last day
          new Date(now.getFullYear(), now.getMonth(), 15).toISOString() // Mid month
        ]
      };
      
      render(<IndividualHabitAnalytics habit={monthBoundaryHabit} onClose={mockOnClose} />);
      
      const currentMonth = new Date().toLocaleDateString('en-US', { month: 'long' });
      const currentYear = new Date().getFullYear();
      expect(screen.getByText(`${currentMonth} ${currentYear}`)).toBeInTheDocument();
    });
  });

  describe('Streak Calculation Edge Cases', () => {
    test('handles streak calculation with gaps', () => {
      const gappyHabit = {
        ...sampleHabit,
        completedDates: [
          '2024-01-01T10:00:00Z',
          '2024-01-02T10:00:00Z',
          // Gap of 2 days
          '2024-01-05T10:00:00Z',
          '2024-01-06T10:00:00Z',
          '2024-01-07T10:00:00Z'
        ]
      };
      
      render(<IndividualHabitAnalytics habit={gappyHabit} onClose={mockOnClose} />);
      
      expect(screen.getByText('Current Streak')).toBeInTheDocument();
      expect(screen.getByText('Best Streak')).toBeInTheDocument();
    });

    test('handles streak calculation with multiple completions per day', () => {
      const multiCompletionHabit = {
        ...sampleHabit,
        completedDates: [
          '2024-01-01T08:00:00Z',
          '2024-01-01T14:00:00Z',
          '2024-01-01T20:00:00Z',
          '2024-01-02T10:00:00Z',
          '2024-01-02T18:00:00Z',
          '2024-01-03T12:00:00Z'
        ]
      };
      
      render(<IndividualHabitAnalytics habit={multiCompletionHabit} onClose={mockOnClose} />);
      
      expect(screen.getByText('Current Streak')).toBeInTheDocument();
      expect(screen.getByText('Best Streak')).toBeInTheDocument();
    });
  });

  describe('Accessibility Enhancements', () => {
    test('has proper ARIA attributes', () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      expect(screen.getByRole('dialog')).toHaveAttribute('aria-modal', 'true');
      expect(screen.getByRole('dialog')).toHaveAttribute('aria-labelledby', 'analytics-title');
    });

    test('close button has proper aria-label', () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      expect(screen.getByRole('button', { name: 'Close analytics modal' })).toBeInTheDocument();
    });

    test('sections have proper headings', () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      expect(screen.getByText('Expected Frequency')).toBeInTheDocument();
      expect(screen.getByText('This Week Progress')).toBeInTheDocument();
      expect(screen.getByText('This Month Calendar')).toBeInTheDocument();
      expect(screen.getByText('Export Data')).toBeInTheDocument();
      expect(screen.getByText('Recent Activity')).toBeInTheDocument();
    });

    test('has screen reader content for statistics', () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      // Check for screen reader friendly content
      expect(screen.getByText('Total Completions')).toBeInTheDocument();
      expect(screen.getByText('Current Streak')).toBeInTheDocument();
      expect(screen.getByText('Best Streak')).toBeInTheDocument();
    });

    test('export buttons have descriptive text', () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      expect(screen.getByText('📊 CSV')).toBeInTheDocument();
      expect(screen.getByText('📄 JSON')).toBeInTheDocument();
      expect(screen.getByText('Download your habit data for analysis')).toBeInTheDocument();
    });

    test('keyboard navigation works correctly', () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      const closeButton = screen.getByRole('button', { name: 'Close analytics modal' });
      const csvButton = screen.getByText('📊 CSV');
      const jsonButton = screen.getByText('📄 JSON');
      
      // Test focus management
      closeButton.focus();
      expect(document.activeElement).toBe(closeButton);
      
      csvButton.focus();
      expect(document.activeElement).toBe(csvButton);
      
      jsonButton.focus();
      expect(document.activeElement).toBe(jsonButton);
    });

    test('calendar has proper accessibility structure', () => {
      render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      // Check for day headers
      const dayHeaders = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
      dayHeaders.forEach(day => {
        expect(screen.getByText(day)).toBeInTheDocument();
      });
    });
  });

  describe('Memory Management', () => {
    test('component unmounts cleanly', () => {
      const { unmount } = render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      expect(() => unmount()).not.toThrow();
    });

    test('handles rapid state changes without memory leaks', () => {
      const { rerender } = render(<IndividualHabitAnalytics habit={sampleHabit} onClose={mockOnClose} />);
      
      // Rapidly change habit data
      for (let i = 0; i < 20; i++) {
        const modifiedHabit = {
          ...sampleHabit,
          id: i,
          name: `Habit ${i}`,
          completedDates: [`2024-01-${String(i % 28 + 1).padStart(2, '0')}T10:00:00Z`]
        };
        rerender(<IndividualHabitAnalytics habit={modifiedHabit} onClose={mockOnClose} />);
      }
      
      expect(screen.getByText(/Habit \d+ Analytics/)).toBeInTheDocument();
    });
  });
});
