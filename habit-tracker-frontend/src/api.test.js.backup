// Mock axios
jest.mock('axios', () => ({
  create: jest.fn(() => ({
    get: jest.fn(),
    post: jest.fn(),
    put: jest.fn(),
    delete: jest.fn(),
    interceptors: {
      request: { use: jest.fn() },
      response: { use: jest.fn() }
    }
  }))
}));

import axios from 'axios';
import api from './api';

// Get the mocked axios
const mockedAxios = axios;

// Create mock axios instance for reuse in tests
const mockAxiosInstance = {
  get: jest.fn(),
  post: jest.fn(),
  put: jest.fn(),
  delete: jest.fn(),
  interceptors: {
    request: { use: jest.fn() },
    response: { use: jest.fn() }
  }
};

// Mock localStorage
const localStorageMock = {
  getItem: jest.fn(),
  setItem: jest.fn(),
  removeItem: jest.fn(),
  clear: jest.fn(),
};
Object.defineProperty(window, 'localStorage', { value: localStorageMock });

// Mock window.location.reload
Object.defineProperty(window, 'location', {
  value: {
    reload: jest.fn(),
  },
  writable: true,
});

describe('API Module', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    localStorageMock.getItem.mockClear();
    localStorageMock.removeItem.mockClear();
    window.location.reload.mockClear();
    
    // Reset the mock axios instance methods
    mockAxiosInstance.get.mockClear();
    mockAxiosInstance.post.mockClear();
    mockAxiosInstance.put.mockClear();
    mockAxiosInstance.delete.mockClear();
  });

  // ================== AXIOS INSTANCE CREATION TESTS ==================

  describe('Axios Instance Creation', () => {
    test('creates axios instance with correct default configuration', () => {
      // Re-import to trigger axios.create
      jest.resetModules();
      require('./api');

      expect(mockedAxios.create).toHaveBeenCalledWith({
        baseURL: 'http://localhost:5000',
        timeout: 10000,
        withCredentials: false,
        headers: {
          'Content-Type': 'application/json',
        }
      });
    });

    test('uses environment variable for API URL when available', () => {
      // Set environment variable
      const originalEnv = process.env.REACT_APP_API_URL;
      process.env.REACT_APP_API_URL = 'https://api.production.com';

      jest.resetModules();
      require('./api');

      expect(mockedAxios.create).toHaveBeenCalledWith({
        baseURL: 'https://api.production.com',
        timeout: 10000,
        withCredentials: false,
        headers: {
          'Content-Type': 'application/json',
        }
      });

      // Restore original environment
      process.env.REACT_APP_API_URL = originalEnv;
    });

    test('falls back to localhost when REACT_APP_API_URL is not set', () => {
      // Ensure environment variable is not set
      const originalEnv = process.env.REACT_APP_API_URL;
      delete process.env.REACT_APP_API_URL;

      jest.resetModules();
      require('./api');

      expect(mockedAxios.create).toHaveBeenCalledWith({
        baseURL: 'http://localhost:5000',
        timeout: 10000,
        withCredentials: false,
        headers: {
          'Content-Type': 'application/json',
        }
      });

      // Restore original environment
      process.env.REACT_APP_API_URL = originalEnv;
    });
  });

  // ================== REQUEST INTERCEPTOR TESTS ==================

  describe('Request Interceptor', () => {
    let requestInterceptor;

    beforeEach(() => {
      jest.resetModules();
      require('./api');
      
      // Get the request interceptor function
      const requestInterceptorCall = mockAxiosInstance.interceptors.request.use.mock.calls[0];
      requestInterceptor = requestInterceptorCall[0];
    });

    test('adds authorization header when token exists', () => {
      localStorageMock.getItem.mockReturnValue('test-token-123');
      
      const config = {
        headers: {},
        url: '/test'
      };

      const result = requestInterceptor(config);

      expect(localStorageMock.getItem).toHaveBeenCalledWith('authToken');
      expect(result.headers.Authorization).toBe('Bearer test-token-123');
    });

    test('does not add authorization header when token does not exist', () => {
      localStorageMock.getItem.mockReturnValue(null);
      
      const config = {
        headers: {},
        url: '/test'
      };

      const result = requestInterceptor(config);

      expect(localStorageMock.getItem).toHaveBeenCalledWith('authToken');
      expect(result.headers.Authorization).toBeUndefined();
    });

    test('preserves existing headers when adding authorization', () => {
      localStorageMock.getItem.mockReturnValue('test-token-123');
      
      const config = {
        headers: {
          'Custom-Header': 'custom-value',
          'Content-Type': 'application/json'
        },
        url: '/test'
      };

      const result = requestInterceptor(config);

      expect(result.headers.Authorization).toBe('Bearer test-token-123');
      expect(result.headers['Custom-Header']).toBe('custom-value');
      expect(result.headers['Content-Type']).toBe('application/json');
    });

    test('handles empty token string', () => {
      localStorageMock.getItem.mockReturnValue('');
      
      const config = {
        headers: {},
        url: '/test'
      };

      const result = requestInterceptor(config);

      expect(result.headers.Authorization).toBeUndefined();
    });

    test('handles whitespace-only token', () => {
      localStorageMock.getItem.mockReturnValue('   ');
      
      const config = {
        headers: {},
        url: '/test'
      };

      const result = requestInterceptor(config);

      expect(result.headers.Authorization).toBe('Bearer    ');
    });

    test('request interceptor error handler', () => {
      jest.resetModules();
      require('./api');
      
      const errorHandler = mockAxiosInstance.interceptors.request.use.mock.calls[0][1];
      const testError = new Error('Request error');

      expect(() => errorHandler(testError)).rejects.toThrow('Request error');
    });
  });

  // ================== RESPONSE INTERCEPTOR TESTS ==================

  describe('Response Interceptor', () => {
    let responseInterceptor;
    let responseErrorHandler;

    beforeEach(() => {
      jest.resetModules();
      require('./api');
      
      // Get the response interceptor functions
      const responseInterceptorCall = mockAxiosInstance.interceptors.response.use.mock.calls[0];
      responseInterceptor = responseInterceptorCall[0];
      responseErrorHandler = responseInterceptorCall[1];
    });

    test('passes through successful responses unchanged', () => {
      const response = {
        data: { message: 'Success' },
        status: 200,
        headers: {}
      };

      const result = responseInterceptor(response);

      expect(result).toBe(response);
    });

    test('handles 401 unauthorized errors', () => {
      const error = {
        response: {
          status: 401,
          data: { message: 'Unauthorized' }
        }
      };

      localStorageMock.removeItem.mockImplementation(() => {});

      expect(() => responseErrorHandler(error)).rejects.toThrow();

      expect(localStorageMock.removeItem).toHaveBeenCalledWith('authToken');
      expect(localStorageMock.removeItem).toHaveBeenCalledWith('user');
      expect(window.location.reload).toHaveBeenCalled();
    });

    test('does not handle non-401 errors', () => {
      const error = {
        response: {
          status: 500,
          data: { message: 'Server Error' }
        }
      };

      expect(() => responseErrorHandler(error)).rejects.toThrow();

      expect(localStorageMock.removeItem).not.toHaveBeenCalled();
      expect(window.location.reload).not.toHaveBeenCalled();
    });

    test('handles errors without response object', () => {
      const error = new Error('Network Error');

      expect(() => responseErrorHandler(error)).rejects.toThrow('Network Error');

      expect(localStorageMock.removeItem).not.toHaveBeenCalled();
      expect(window.location.reload).not.toHaveBeenCalled();
    });

    test('handles errors with response but no status', () => {
      const error = {
        response: {
          data: { message: 'Unknown Error' }
          // No status property
        }
      };

      expect(() => responseErrorHandler(error)).rejects.toThrow();

      expect(localStorageMock.removeItem).not.toHaveBeenCalled();
      expect(window.location.reload).not.toHaveBeenCalled();
    });

    test('handles multiple 401 errors in sequence', () => {
      const error = {
        response: {
          status: 401,
          data: { message: 'Token expired' }
        }
      };

      expect(() => responseErrorHandler(error)).rejects.toThrow();
      expect(() => responseErrorHandler(error)).rejects.toThrow();

      expect(localStorageMock.removeItem).toHaveBeenCalledTimes(4); // 2 calls Ã— 2 items
      expect(window.location.reload).toHaveBeenCalledTimes(2);
    });
  });

  // ================== API METHODS TESTS ==================

  describe('API Methods', () => {
    test('exports axios instance with HTTP methods', () => {
      jest.resetModules();
      const apiInstance = require('./api').default;

      expect(apiInstance).toBeDefined();
      expect(typeof apiInstance.get).toBe('function');
      expect(typeof apiInstance.post).toBe('function');
      expect(typeof apiInstance.put).toBe('function');
      expect(typeof apiInstance.delete).toBe('function');
    });

    test('API instance can make GET requests', async () => {
      mockAxiosInstance.get.mockResolvedValue({ data: { message: 'GET success' } });

      jest.resetModules();
      const apiInstance = require('./api').default;

      const response = await apiInstance.get('/test');

      expect(mockAxiosInstance.get).toHaveBeenCalledWith('/test');
      expect(response.data.message).toBe('GET success');
    });

    test('API instance can make POST requests', async () => {
      mockAxiosInstance.post.mockResolvedValue({ data: { message: 'POST success' } });

      jest.resetModules();
      const apiInstance = require('./api').default;

      const response = await apiInstance.post('/test', { data: 'test' });

      expect(mockAxiosInstance.post).toHaveBeenCalledWith('/test', { data: 'test' });
      expect(response.data.message).toBe('POST success');
    });

    test('API instance can make PUT requests', async () => {
      mockAxiosInstance.put.mockResolvedValue({ data: { message: 'PUT success' } });

      jest.resetModules();
      const apiInstance = require('./api').default;

      const response = await apiInstance.put('/test', { data: 'test' });

      expect(mockAxiosInstance.put).toHaveBeenCalledWith('/test', { data: 'test' });
      expect(response.data.message).toBe('PUT success');
    });

    test('API instance can make DELETE requests', async () => {
      mockAxiosInstance.delete.mockResolvedValue({ data: { message: 'DELETE success' } });

      jest.resetModules();
      const apiInstance = require('./api').default;

      const response = await apiInstance.delete('/test');

      expect(mockAxiosInstance.delete).toHaveBeenCalledWith('/test');
      expect(response.data.message).toBe('DELETE success');
    });
  });

  // ================== INTEGRATION TESTS ==================

  describe('Integration Tests', () => {
    test('complete authentication flow simulation', async () => {
      // Initial request without token
      localStorageMock.getItem.mockReturnValue(null);
      
      jest.resetModules();
      const apiInstance = require('./api').default;
      
      const requestInterceptor = mockAxiosInstance.interceptors.request.use.mock.calls[0][0];
      const responseErrorHandler = mockAxiosInstance.interceptors.response.use.mock.calls[0][1];

      // Make request without token
      const config1 = { headers: {}, url: '/habits' };
      const result1 = requestInterceptor(config1);
      expect(result1.headers.Authorization).toBeUndefined();

      // Simulate login and token storage
      localStorageMock.getItem.mockReturnValue('new-auth-token');

      // Make request with token
      const config2 = { headers: {}, url: '/habits' };
      const result2 = requestInterceptor(config2);
      expect(result2.headers.Authorization).toBe('Bearer new-auth-token');

      // Simulate token expiration (401 error)
      const authError = {
        response: {
          status: 401,
          data: { message: 'Token expired' }
        }
      };

      expect(() => responseErrorHandler(authError)).rejects.toThrow();
      expect(localStorageMock.removeItem).toHaveBeenCalledWith('authToken');
      expect(localStorageMock.removeItem).toHaveBeenCalledWith('user');
      expect(window.location.reload).toHaveBeenCalled();
    });

    test('handles localStorage errors gracefully', () => {
      // Mock localStorage to throw error
      localStorageMock.getItem.mockImplementation(() => {
        throw new Error('localStorage not available');
      });

      jest.resetModules();
      const apiInstance = require('./api').default;
      
      const requestInterceptor = mockAxiosInstance.interceptors.request.use.mock.calls[0][0];

      // Should not crash when localStorage throws
      expect(() => {
        const config = { headers: {}, url: '/test' };
        requestInterceptor(config);
      }).toThrow('localStorage not available');
    });

    test('handles window.location.reload errors gracefully', () => {
      // Mock reload to throw error
      window.location.reload.mockImplementation(() => {
        throw new Error('Reload failed');
      });

      jest.resetModules();
      require('./api');
      
      const responseErrorHandler = mockAxiosInstance.interceptors.response.use.mock.calls[0][1];

      const authError = {
        response: {
          status: 401,
          data: { message: 'Unauthorized' }
        }
      };

      // Should still attempt cleanup even if reload fails
      expect(() => responseErrorHandler(authError)).rejects.toThrow();
      expect(localStorageMock.removeItem).toHaveBeenCalledWith('authToken');
      expect(localStorageMock.removeItem).toHaveBeenCalledWith('user');
    });
  });

  // ================== EDGE CASES TESTS ==================

  describe('Edge Cases', () => {
    test('handles config object without headers', () => {
      localStorageMock.getItem.mockReturnValue('test-token');
      
      jest.resetModules();
      require('./api');
      
      const requestInterceptor = mockAxiosInstance.interceptors.request.use.mock.calls[0][0];

      const config = { url: '/test' }; // No headers property

      const result = requestInterceptor(config);

      expect(result.headers).toBeDefined();
      expect(result.headers.Authorization).toBe('Bearer test-token');
    });

    test('handles null config object', () => {
      localStorageMock.getItem.mockReturnValue('test-token');
      
      jest.resetModules();
      require('./api');
      
      const requestInterceptor = mockAxiosInstance.interceptors.request.use.mock.calls[0][0];

      expect(() => requestInterceptor(null)).toThrow();
    });

    test('handles undefined token from localStorage', () => {
      localStorageMock.getItem.mockReturnValue(undefined);
      
      jest.resetModules();
      require('./api');
      
      const requestInterceptor = mockAxiosInstance.interceptors.request.use.mock.calls[0][0];

      const config = { headers: {}, url: '/test' };
      const result = requestInterceptor(config);

      expect(result.headers.Authorization).toBeUndefined();
    });

    test('handles very long token values', () => {
      const longToken = 'a'.repeat(10000); // Very long token
      localStorageMock.getItem.mockReturnValue(longToken);
      
      jest.resetModules();
      require('./api');
      
      const requestInterceptor = mockAxiosInstance.interceptors.request.use.mock.calls[0][0];

      const config = { headers: {}, url: '/test' };
      const result = requestInterceptor(config);

      expect(result.headers.Authorization).toBe(`Bearer ${longToken}`);
    });

    test('handles special characters in token', () => {
      const specialToken = 'token-with-special-chars!@#$%^&*()_+-={}[]|\\:";\'<>?,./';
      localStorageMock.getItem.mockReturnValue(specialToken);
      
      jest.resetModules();
      require('./api');
      
      const requestInterceptor = mockAxiosInstance.interceptors.request.use.mock.calls[0][0];

      const config = { headers: {}, url: '/test' };
      const result = requestInterceptor(config);

      expect(result.headers.Authorization).toBe(`Bearer ${specialToken}`);
    });

    test('handles error objects with partial response data', () => {
      jest.resetModules();
      require('./api');
      
      const responseErrorHandler = mockAxiosInstance.interceptors.response.use.mock.calls[0][1];

      // Error with response but no status
      const error1 = { response: { data: { message: 'Error' } } };
      expect(() => responseErrorHandler(error1)).rejects.toThrow();

      // Error with status but no response data
      const error2 = { response: { status: 401 } };
      expect(() => responseErrorHandler(error2)).rejects.toThrow();

      expect(localStorageMock.removeItem).toHaveBeenCalledWith('authToken');
      expect(localStorageMock.removeItem).toHaveBeenCalledWith('user');
    });

    test('interceptors are registered exactly once', () => {
      jest.resetModules();
      require('./api');

      expect(mockAxiosInstance.interceptors.request.use).toHaveBeenCalledTimes(1);
      expect(mockAxiosInstance.interceptors.response.use).toHaveBeenCalledTimes(1);
    });
  });

  // ================== CONFIGURATION TESTS ==================

  describe('Configuration Tests', () => {
    test('timeout is set correctly', () => {
      jest.resetModules();
      require('./api');

      expect(mockedAxios.create).toHaveBeenCalledWith(
        expect.objectContaining({
          timeout: 10000
        })
      );
    });

    test('withCredentials is set to false', () => {
      jest.resetModules();
      require('./api');

      expect(mockedAxios.create).toHaveBeenCalledWith(
        expect.objectContaining({
          withCredentials: false
        })
      );
    });

    test('default content-type header is set', () => {
      jest.resetModules();
      require('./api');

      expect(mockedAxios.create).toHaveBeenCalledWith(
        expect.objectContaining({
          headers: {
            'Content-Type': 'application/json'
          }
        })
      );
    });

    test('baseURL configuration with different environment values', () => {
      const testUrls = [
        'http://localhost:3001',
        'https://api.staging.com',
        'https://api.production.com',
        'http://192.168.1.100:5000'
      ];

      const originalEnv = process.env.REACT_APP_API_URL;

      testUrls.forEach(url => {
        process.env.REACT_APP_API_URL = url;
        
        jest.resetModules();
        mockedAxios.create.mockClear();
        require('./api');

        expect(mockedAxios.create).toHaveBeenCalledWith(
          expect.objectContaining({
            baseURL: url
          })
        );
      });

      // Restore original environment
      process.env.REACT_APP_API_URL = originalEnv;
    });
  });
});
